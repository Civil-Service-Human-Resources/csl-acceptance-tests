package uk.gov.cslearning.acceptanceTests.Data;

import org.apache.commons.lang3.RandomStringUtils;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import uk.gov.cslearning.acceptanceTests.API.CourseDB.model.*;
import uk.gov.cslearning.acceptanceTests.API.CourseDB.model.Module;

import java.time.LocalDateTime;
import java.util.List;

@Component
public class ModuleCreationService {

    @Value("${pages.csl-management.module-creation.cdn-pdf.url}")
    private String pdfCdnUrl;

    @Value("${pages.csl-management.module-creation.cdn-pdf.name}")
    private String pdfCdnFileName;

    @Value("${pages.csl-management.module-creation.elearning.url}")
    private String elearningCdnUrl;

    @Value("${pages.csl-management.module-creation.elearning.startPage}")
    private String elearningCdnStartPage;

    @Value("${pages.csl-management.module-creation.cdn-video.url}")
    private String videoCdnUrl;

    private String generateModuleId() {
        String randomID = RandomStringUtils.randomAlphabetic(4);
        return String.format("ACCEPTANCE-MODULE-%s", randomID);
    }

    private String generateEventId() {
        String randomID = RandomStringUtils.randomAlphabetic(5);
        return String.format("ACCEPTANCE-EVENT-%s", randomID);
    }

    private Module genericModule(String type, boolean optional) {
        String id = generateModuleId();
        String moduleTitle = String.format("ACC: %s Module %s", type, id);
        return new Module(
                type,
                "https://google.co.uk",
                id,
                moduleTitle,
                String.format("A generic %s module generated by acceptance tests", type),
                3000,
                0,
                optional,
                null,
                false,
                type
        );
    }

    public Module linkModule(boolean optional) {
        Module mod = genericModule("link", optional);
        mod.url = "https://bbc.co.uk";
        return mod;
    }

    public Module videoModule(boolean optional) {
        Module mod = genericModule("video", optional);
        mod.url = videoCdnUrl;
        return mod;
    }

    public FileModule fileModule(boolean optional) {
        String id = generateModuleId();
        String moduleTitle = String.format("ACC: file Module %s", id);
        return new FileModule(
                pdfCdnUrl,
                id,
                moduleTitle,
                "A generic file module generated by acceptance tests",
                3000,
                0,
                optional,
                null,
                false,
                new File(pdfCdnUrl, pdfCdnFileName)
        );
    }

    public ELearningModule eLearningModule(boolean optional) {
        String id = generateModuleId();
        String moduleTitle = String.format("ACC: elearning Module %s", id);
        return new ELearningModule(
                elearningCdnUrl,
                id,
                moduleTitle,
                "A generic elearning module generated by acceptance tests",
                3000,
                0,
                optional,
                null,
                false,
                elearningCdnStartPage
        );
    }

    public EventModule eventModule(boolean optional, int cost, LocalDateTime eventTime) {
        String id = generateModuleId();
        String moduleTitle = String.format("ACC: face-to-face Module %s", id);
        Venue venue = new Venue("Test location", "acceptance test avenue", 10, 1, 10);
        List<Integer> date = List.of(new Integer[]{eventTime.getYear(), eventTime.getMonth().getValue(), eventTime.getDayOfMonth()});
        List<Integer> startTime = List.of(new Integer[]{10, 0});
        List<Integer> endTime = List.of(new Integer[]{11, 0});
        List<DateRange> dateRange = List.of(new DateRange(date, startTime, endTime));
        Event event = new Event(generateEventId(), "", venue, dateRange, "Active", null);
        return new EventModule(
                "",
                id,
                moduleTitle,
                "A generic elearning module generated by acceptance tests",
                3000,
                cost,
                optional,
                null,
                false,
                List.of(event)
        );
    }
}
